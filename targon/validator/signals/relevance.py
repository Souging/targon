
# The MIT License (MIT)
# Copyright © 2021 Yuma Rao

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the “Software”), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of
# the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import torch
from typing import List
import torch.nn.functional as F
from .base import BaseRewardModel
from .config import RewardModelType
from transformers import  AutoTokenizer, AutoModel
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer
from torchmetrics.functional import pairwise_cosine_similarity


def mean_pooling(model_output, attention_mask):
    """Applies mean pooling to the token embeddings generated by the model.
    Args:
        model_output (torch.Tensor): Embedding model output, where the first element contains token embeddings.
        attention_mask (torch.Tensor): Attention mask to indicate valid tokens.
    Returns:
        torch.Tensor: Mean-pooled representation of the token embeddings.
    Notes:
        - The function calculates the mean-pooled representation using the attention mask for valid tokens.
        - Input_mask_expanded is created by expanding the attention mask to match the size of token embeddings.
        - The result is obtained by summing the element-wise multiplication of embeddings and input_mask_expanded,
            and dividing it by the sum of input_mask_expanded after clamping its values to a minimum of 1e-9.
    """
    token_embeddings = model_output[0]
    input_mask_expanded = (
        attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()
    )
    return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(
        input_mask_expanded.sum(1), min=1e-9
    )

class RelevanceRewardSignal( BaseRewardModel ):

    @property
    def name(self) -> str: return RewardModelType.relevance.value
   
    def __init__( self, device: str ):
        super().__init__()
        self.device = device
        self.models = [
            BertRelevanceRewardSignal(self.device),
            TfidfCosineSimilaritySignal()
       ]
        self.bounds = [-0.0246, 0.001]

    def get_rewards(self, system_response: str, completions: List[str]) -> torch.FloatTensor:
        return torch.tensor([self.reward(system_response, completion) for completion in completions], dtype=torch.float32).to(self.device)
    
    def normalize_rewards(self, rewards: torch.FloatTensor) -> torch.FloatTensor:
        return rewards  # Implement normalization if needed

    def reward(self, system_response: str, completion: str) -> float:
        for i, model in enumerate(self.models):
            similarity = model.reward(system_response, completion)
            # Normalize the similarity score to be between 0 and 1
            normalized_score = (similarity + 1) / 2
            return normalized_score

        
class TfidfCosineSimilaritySignal(BaseRewardModel):
    def __init__(self, device):
        super().__init__()
        self.device = device
        self.reduction_factor_per_word = 0.001
        self.base_similarity_threshold = 0.75


    def calculate_text_similarity(self, text1, text2):
        vectorizer = TfidfVectorizer()
        tfidf_matrix = vectorizer.fit_transform([text1, text2])
        similarity = cosine_similarity(tfidf_matrix[0:1], tfidf_matrix[1:2])[0][0]
        return similarity

    def reward(self, system_response: str, completion: str, weight: float) -> float:
        similarity = self.calculate_text_similarity(system_response, completion)

        words_in_response = len(completion.split())
        reduction_for_length = self.reduction_factor_per_word * (words_in_response - 1)

        min_similarity = max(1 - reduction_for_length, self.base_similarity_threshold)


        return weight if similarity >= min_similarity else 0


class BertRelevanceRewardSignal( BaseRewardModel ):

    relevance_model_path = "bert-base-uncased"
   
    def __init__( self, device: str ):
        super().__init__()
        self.device = device
        self.tokenizer = AutoTokenizer.from_pretrained(BertRelevanceRewardSignal.relevance_model_path)
        self.model = AutoModel.from_pretrained(BertRelevanceRewardSignal.relevance_model_path).to(self.device)

    def get_embedding(self, message: str) -> "torch.FloatTensor":
        """Runs a forward pass through the model.
        Args:
            message (:obj:`str`):
                text message to be encoded.
        Returns:
            embedding (:obj:`torch.FloatTensor`):
                Embedding for the message.
        """
        encoded_input = self.tokenizer(
            message,
            padding=True,
            truncation=True,
            return_overflowing_tokens=True,
            return_tensors="pt",
        ).to(self.device)

        # Pop the overflow mapping from the input to maintain the expected { input_ids, mask } format of the model
        _ = encoded_input.pop("overflow_to_sample_mapping")

        with torch.no_grad():
            embeddings = self.model(**encoded_input)

        sentence_embeddings = mean_pooling(embeddings, encoded_input["attention_mask"])
        sentence_embeddings = torch.nn.functional.normalize(sentence_embeddings, p=2, dim=1)
        batch_representation = torch.mean(sentence_embeddings, dim=0)
        return batch_representation
    
    def reward(self, system_response: str, completion: str) -> float:
        system_embedding = self.get_embedding(system_response)
        completion_embedding = self.get_embedding(completion)
        # Calculate cosine similarity
        similarity = pairwise_cosine_similarity(system_embedding.unsqueeze(0), completion_embedding.unsqueeze(0))
        return similarity.item()


class RelevanceRewardModel( BaseRewardModel ):

    @property
    def name(self) -> str: return RewardModelType.relevance.value
   
    def __init__( self, device: str ):
        super().__init__()
        self.device = device
        self.models = [
            BertRelevanceRewardModel(self.device)
        ]
        self.bounds = [-0.0246, 0.3]

    def get_rewards( self, prompt: str, completions: List[str], name: str, solution: str ) -> torch.FloatTensor:
        return torch.tensor( [self.reward( prompt, completion, name ) for completion in completions], dtype=torch.float32).to(self.device)
    
    def normalize_rewards( self, rewards: torch.FloatTensor ) -> torch.FloatTensor:
        return rewards
    
    def reward(self, prompt: str, completion: str, name: str) -> float:
        for i, model in enumerate(self.models):

            # rewards
            diff = model.reward(prompt,completion)

            # If a model returns 0, stop iterating and return 0
            if diff < self.bounds[i]:
                return 0.0
        # If none of the models returned 0, return 1
        return 1.0

class BertRelevanceRewardModel( BaseRewardModel ):

    relevance_model_path = "bert-base-uncased"
   
    def __init__( self, device: str ):
        super().__init__()
        self.device = device
        self.tokenizer = AutoTokenizer.from_pretrained(BertRelevanceRewardModel.relevance_model_path)
        self.model = AutoModel.from_pretrained(BertRelevanceRewardModel.relevance_model_path).to(self.device)

    def get_embedding(self, message: str) -> "torch.FloatTensor":
        """Runs a forward pass through the model.
        Args:
            message (:obj:`str`):
                text message to be encoded.
        Returns:
            embedding (:obj:`torch.FloatTensor`):
                Embedding for the message.
        """
        encoded_input = self.tokenizer(
            message,
            padding=True,
            truncation=True,
            return_overflowing_tokens=True,
            return_tensors="pt",
        ).to(self.device)

        # Pop the overflow mapping from the input to maintain the expected { input_ids, mask } format of the model
        _ = encoded_input.pop("overflow_to_sample_mapping")

        with torch.no_grad():
            embeddings = self.model(**encoded_input)

        sentence_embeddings = mean_pooling(embeddings, encoded_input["attention_mask"])
        sentence_embeddings = torch.nn.functional.normalize(sentence_embeddings, p=2, dim=1)
        batch_representation = torch.mean(sentence_embeddings, dim=0)
        return batch_representation
    
    def reward( self, prompt: str, completion:str ) -> float:
        # Get the two bert embeddings.
        completion_embedding = self.get_embedding( completion)
        prompt_embedding = self.get_embedding( prompt)

        # Calculate the RMSE distance for the 2 embeddings.
        diff = (( completion_embedding - prompt_embedding )**2).mean()**0.5

        # Return relevance scoring.
        return float(-diff)
